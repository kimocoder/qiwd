/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp --verbose dbus-interface.xml -p Iwd
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef IWD_H
#define IWD_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface net.connman.iwd.Device
 */
class NetConnmanIwdDeviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "net.connman.iwd.Device"; }

public:
    NetConnmanIwdDeviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~NetConnmanIwdDeviceInterface();

    Q_PROPERTY(QDBusObjectPath Adapter READ adapter)
    inline QDBusObjectPath adapter() const
    { return qvariant_cast< QDBusObjectPath >(property("Adapter")); }

    Q_PROPERTY(QString Address READ address)
    inline QString address() const
    { return qvariant_cast< QString >(property("Address")); }

    Q_PROPERTY(QString Mode READ mode WRITE setMode)
    inline QString mode() const
    { return qvariant_cast< QString >(property("Mode")); }
    inline void setMode(const QString &value)
    { setProperty("Mode", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("Name")); }

    Q_PROPERTY(bool Powered READ powered WRITE setPowered)
    inline bool powered() const
    { return qvariant_cast< bool >(property("Powered")); }
    inline void setPowered(bool value)
    { setProperty("Powered", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface net.connman.iwd.Network
 */
class NetConnmanIwdNetworkInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "net.connman.iwd.Network"; }

public:
    NetConnmanIwdNetworkInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~NetConnmanIwdNetworkInterface();

    Q_PROPERTY(bool Connected READ connected)
    inline bool connected() const
    { return qvariant_cast< bool >(property("Connected")); }

    Q_PROPERTY(QDBusObjectPath Device READ device)
    inline QDBusObjectPath device() const
    { return qvariant_cast< QDBusObjectPath >(property("Device")); }

    Q_PROPERTY(QDBusObjectPath KnownNetwork READ knownNetwork)
    inline QDBusObjectPath knownNetwork() const
    { return qvariant_cast< QDBusObjectPath >(property("KnownNetwork")); }

    Q_PROPERTY(QString Name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("Name")); }

    Q_PROPERTY(QString Type READ type)
    inline QString type() const
    { return qvariant_cast< QString >(property("Type")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Connect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Connect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface net.connman.iwd.SimpleConfiguration
 */
class NetConnmanIwdSimpleConfigurationInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "net.connman.iwd.SimpleConfiguration"; }

public:
    NetConnmanIwdSimpleConfigurationInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~NetConnmanIwdSimpleConfigurationInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Cancel()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Cancel"), argumentList);
    }

    inline QDBusPendingReply<QString> GeneratePin()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GeneratePin"), argumentList);
    }

    inline QDBusPendingReply<> PushButton()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("PushButton"), argumentList);
    }

    inline QDBusPendingReply<> StartPin(const QString &pin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(pin);
        return asyncCallWithArgumentList(QStringLiteral("StartPin"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface net.connman.iwd.Station
 */
class NetConnmanIwdStationInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "net.connman.iwd.Station"; }

public:
    NetConnmanIwdStationInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~NetConnmanIwdStationInterface();

    Q_PROPERTY(QDBusObjectPath ConnectedNetwork READ connectedNetwork)
    inline QDBusObjectPath connectedNetwork() const
    { return qvariant_cast< QDBusObjectPath >(property("ConnectedNetwork")); }

    Q_PROPERTY(bool Scanning READ scanning)
    inline bool scanning() const
    { return qvariant_cast< bool >(property("Scanning")); }

    Q_PROPERTY(QString State READ state)
    inline QString state() const
    { return qvariant_cast< QString >(property("State")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ConnectHiddenNetwork(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("ConnectHiddenNetwork"), argumentList);
    }

    inline QDBusPendingReply<> Disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Disconnect"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> GetHiddenAccessPoints()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetHiddenAccessPoints"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> GetOrderedNetworks()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetOrderedNetworks"), argumentList);
    }

    inline QDBusPendingReply<> RegisterSignalLevelAgent(const QDBusObjectPath &path, const QVariantList &levels)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path) << QVariant::fromValue(levels);
        return asyncCallWithArgumentList(QStringLiteral("RegisterSignalLevelAgent"), argumentList);
    }

    inline QDBusPendingReply<> Scan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Scan"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterSignalLevelAgent(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("UnregisterSignalLevelAgent"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.freedesktop.DBus.Properties
 */
class OrgFreedesktopDBusPropertiesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Properties"; }

public:
    OrgFreedesktopDBusPropertiesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopDBusPropertiesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> Get(const QString &interface_name, const QString &property_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name);
        return asyncCallWithArgumentList(QStringLiteral("Get"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetAll(const QString &interface_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name);
        return asyncCallWithArgumentList(QStringLiteral("GetAll"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &interface_name, const QString &property_name, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("Set"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertiesChanged(const QString &interface_name, const QVariantMap &changed_properties, const QStringList &invalidated_properties);
};

namespace net {
  namespace connman {
    namespace iwd {
      typedef ::NetConnmanIwdDeviceInterface Device;
      typedef ::NetConnmanIwdNetworkInterface Network;
      typedef ::NetConnmanIwdSimpleConfigurationInterface SimpleConfiguration;
      typedef ::NetConnmanIwdStationInterface Station;
    }
  }
}
namespace org {
  namespace freedesktop {
    namespace DBus {
      typedef ::OrgFreedesktopDBusPropertiesInterface Properties;
    }
  }
}
#endif
